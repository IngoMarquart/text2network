
"Match p=(r:edge)<-[:onto]-(v:word)  WHERE v.token_id in $ids AND  r.time in $times WITH r,v.token_id as ego MATCH (t: word) < -[: onto]-(q:edge {run_index:r.run_index}) < -[: onto]-(x:word) WHERE q.pos <> r.pos AND NOT t.token_id = ego WITH t.token_id as idx, q.weight as qweight, r.weight as rweight, ego Return ego, DISTINCT(idx) as alter, sum(qweight) * sum(rweight) as weight order by ego"



Match p=(s {token:"manager"})-[:onto]->(r:edge {time:1995})-[:onto]->(v {token:"leader"}) WITH r MATCH (t:word)<-[:onto]-(q:edge {run_index:r.run_index})<-[:onto]-(x:word) WHERE x.token <> "ceo" WITH  DISTINCT(t.token) as idx, sum(q.weight) as weight Return DISTINCT(idx) as idx,  weight order by weight DESC

d Scripts
// President Replacing Agg
Match p=(s {token:"ceo"})-[:onto]->(r:edge {time:1995})-[:onto]->(v {token:"president"}) WITH r MATCH (t:word)<-[:onto]-(q:edge {run_index:r.run_index}) WITH  DISTINCT(t.token) as idx, q.weight as weight Return DISTINCT(t.token) as idx,  weight, count(q.run_index) as nr_ridx order by weight DESC

Match p=(s {token:"ceo"})-[:onto]->(r:edge {time:1995})-[:onto]->(v {token:"president"}) WITH r MATCH (t:word)<-[:onto]-(q:edge {run_index:r.run_index})<-[:onto]-(x:word) WHERE x.token <> "ceo" WITH t.token as idx, q.weight*r.weight as weight Return DISTINCT(idx) as idx,  sum(weight) as weight order by weight DESC




Match p=(r:edge {time:1995})-[:onto]->(v {token:$replacing}) 
WITH r MATCH (t:word)<-[:onto]-(q:edge {run_index:r.run_index})<-[:onto]-(x:word) WHERE NOT q.pos <> r.pos AND Not x.token  in [$replacing] AND Not t.token  in [$replacing]
WITH t.token as idx, q.weight as qweight, r.weight as rweight  Return DISTINCT(idx) as idx, qweight, rweight, sum(weight)*sum(rweight) as weight order by weight DESC



// Context from Replacement
Match p=(r:edge)-[:onto]->(v:word)
WHERE v.id in $ids AND r.time == 2000 AND r.weight >=0.1 
WITH r MATCH (t:word)<-[:onto]-(q:edge {run_index:r.run_index})<-[:onto]-(x:word) WHERE q.pos <> r.pos 
WITH t.token as idx, q.weight as qweight, r.weight as rweight  Return DISTINCT(idx) as idx, COUNT(idx) as nr, sum(qweight)*sum(rweight) as weight order by weight DESC